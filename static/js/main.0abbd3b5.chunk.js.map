{"version":3,"sources":["../../src/components/Box/styles.ts","../../src/utils/BoxTools.ts","../../src/components/Box/index.tsx","../../src/components/Button/styles.ts","../../src/utils/ButtonTools.ts","../../src/components/Button/index.tsx","../../src/components/Divider/styles.ts","../../src/components/Divider/index.tsx","../../src/components/List/styles.ts","../../src/utils/ListTools.ts","../../src/components/List/Item.tsx","../../src/components/List/index.tsx","App.tsx","index.tsx"],"names":["StyledBox","styled","size","props","selected","Box","React","StyledButton","Button","StyledDivider","Divider","StyledList","textAlign","StyledListItem","height","Item","List","item","App","className","blur","items","ReactDOM","render","document","getElementById"],"mappings":"moBASA,IAAMA,EAAYC,IAAH,SACT,kBCRF,QAF0BC,EDUmBC,EAA3C,MCPEC,qEAIG,MAAGF,EACNE,oEAIG,OAAGF,EACNE,wEAKAA,4DAlBqB,IAACF,KDcE,mBAA8BC,EAA9B,aACQ,mBAA8BA,EAA9B,aAEtB,mBAA2BA,qBAA3B,4CERZE,EAA0B,SAACF,GAC/B,OACAG,2CADA,K,4kBCFF,IAAMC,EAAeN,IAAH,SACZ,kBCPF,QAF6BC,EDSsBC,EAAjD,MCNEC,mEAIG,MAAGF,EACNE,mEAIG,OAAGF,EACNE,uEAKAA,2DAlBwB,IAACF,KDaL,mBAAiCC,EAAjC,aACQ,mBAAiCA,EAAjC,aAEtB,mBAA8BA,qBAA9B,4CEPRK,EAAgC,SAACL,GACnC,OACEG,2CADF,K,4NCJJ,IAAMG,EAAgBR,IAAH,SCAbS,EAAkC,WACpC,OACEJ,0BADF,O,6dCCG,IAAMK,EAAaV,IAAH,SAKjB,kBCWF,YAF2BW,EDToBT,EAA7C,WCYEC,uDAGG,UAAGQ,EACNR,2HAOAA,yHAdsB,IAACQ,KDElBC,EAAiBZ,IAAH,SACrB,kBCvBF,QAF6Ba,EDyBoBX,EAA/C,QCtBEC,uEAIG,OAAGU,EACNV,sEAKAA,8DAbwB,IAACU,KCM3BC,EAAqB,SAACZ,GAE1B,OACEG,qCADF,KCIIU,EAA4B,SAACb,G,MAEjC,OACE,kDACGA,EADH,0BACG,OAAiB,SAAAc,GAAI,OACpBX,wCACEA,2BAFkB,SCWbY,G,MAtBH,WAIV,OACE,yBAAKC,UAAU,kBACb,6CACA,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAKjB,KAAK,KAAKkB,KAAM,IACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQlB,KAAK,MAAb,SACA,kBAAC,EAAD,MACA,kBAAC,EAAD,eACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQA,KAAK,MAAb,SACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMmB,MAdK,CAAC,QAAS,SAAU,OAAQ,UAchBP,OAAO,WCftCQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.0abbd3b5.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { selectBoxSize } from '../../utils/BoxTools';\n\ninterface StyledBoxProps {\n    size?: string,\n    border?: boolean,\n    blur?: number,\n}\n\nconst StyledBox = styled.div<StyledBoxProps>`\n    ${(props: StyledBoxProps) => ( selectBoxSize(props.size!)) }\n        margin: 0 auto;\n        background: rgba( 255, 255, 255, 0.25 );\n        box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n        backdrop-filter: blur(${(props: StyledBoxProps) => `${props.blur}px`});\n        -webkit-backdrop-filter: blur(${(props: StyledBoxProps) => `${props.blur}px`});\n        border-radius: 15px;\n        border: ${(props: StyledBoxProps) => props.border === false ? `none;` : `1px solid rgba( 255, 255, 255, 0.18 );`}\n    `\nexport default StyledBox;","export const selectBoxSize = (size: string) => {\n    let selected: string;\n    if(size === 'sm') {\n        selected = ` \n            height: 200px;\n            width: 200px;\n        `\n    } else if(size === 'm') {\n        selected = `\n            height: 400px;\n            width: 400px;\n        `\n    } else if(size === 'lg') {\n        selected = `\n            height: 500px;\n            width: 500px;\n            `\n    } else {\n        selected = `\n        height: 300px;\n        width: 300px;\n        `\n    }\n    return selected;\n};","import * as React from 'react'\nimport StyledBox from './styles';\n\ninterface BoxProps {\n  size?: 'sm' | 'm' | 'lg',\n  border?: boolean,\n  blur?: number,\n}\n\nconst Box: React.FC<BoxProps> = (props) => {\n  return (\n  <StyledBox \n   {...props}\n  />\n  )\n};\n\nexport default Box;","import styled from 'styled-components';\nimport { selectButtonSize } from '../../utils/ButtonTools';\ninterface StyledButtonProps {\n    size?: string,\n    blur?: number,\n    border?: boolean\n}\n\nconst StyledButton = styled.div<StyledButtonProps>`\n    ${(props: StyledButtonProps) => ( selectButtonSize(props.size!))};\n    margin: 0 auto;\n    background: rgba( 255, 255, 255, 0.25 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n    backdrop-filter: blur(${(props: StyledButtonProps) => `${props.blur}px`});\n    -webkit-backdrop-filter: blur(${(props: StyledButtonProps) => `${props.blur}px`});\n    border-radius: 7px;\n    border: ${(props: StyledButtonProps) => props.border === false ? `none;` : `1px solid rgba( 255, 255, 255, 0.18 );`}\n\n    font-weight: bold;\n    font-size: 0.9375em;\n    color: white; \n    text-align: center;\n    align-items: center;\n    display: inline-grid;\n    vertical-align: middle;\n    &:hover {\n        cursor: pointer;\n        background: rgba( 255, 255, 255, 0.35 );\n    }\n`\nexport default StyledButton ;","export const selectButtonSize = (size: string) => {\n    let selected: string;\n    if(size === 'sm') {\n        selected = ` \n            height: 30px;\n            width: 65px;\n        `\n    } else if(size === 'm') {\n        selected = `\n            height: 40px;\n            width: 100px;\n        `\n    } else if(size === 'lg') {\n        selected = `\n            height: 45px;\n            width: 125px;\n            `\n    } else {\n        selected = `\n        height: 40px;\n        width: 110px;\n        `\n    }\n    return selected;\n};","import * as React from 'react'\nimport StyledButton from './styles';\n\ninterface ButtonProps {\n  size?: 'sm' | 'm' | 'lg',\n  border?: boolean,\n  blur?: number\n}\n\nconst Button: React.FC<ButtonProps> = (props) => {\n    return (\n      <StyledButton \n        {...props}\n      />\n    )\n};\n\nexport default Button;","import styled from 'styled-components';\n\ninterface StyledDividerProps {\n   \n}\n\nconst StyledDivider = styled.div<StyledDividerProps>`\n    width: 100%;\n    height: 1px;\n    margin: 7px 0;\n    background: rgba( 255, 255, 255, 0.25 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n`\nexport default StyledDivider;","import * as React from 'react'\nimport StyledDivider from './styles';\n\ninterface DividerProps {\n}\n\nconst Divider: React.FC<DividerProps> = () => {\n    return (\n      <StyledDivider />\n    )\n};\n\nexport default Divider;","import styled from 'styled-components';\nimport { selectListHeight, selectListText } from '../../utils/ListTools';\n\ninterface StyledListProps {\n    height?: 'sm' | 'lg';\n    textAlign?: 'left' | 'center' | 'right';\n}\n\nexport const StyledList = styled.div<StyledListProps>`\n    font-weight: bold;\n    background: rgba( 255, 255, 255, 0.05 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n    width: 100%;\n    ${(props: StyledListProps) => ( selectListText(props.textAlign!))};\n\n\n    p {\n        display: table-cell;\n        vertical-align: middle;\n        height: inherit;\n    }\n`\n\n\nexport const StyledListItem = styled.div<StyledListProps>`\n    ${(props: StyledListProps) => ( selectListHeight(props.height!))};\n    border-bottom: 1.5px solid rgba( 255, 255, 255, 0.2 );\n    color: #ffffff;\n`\n\n\n\n\n\n","export const selectListHeight = (height: string) => {\n    let selected: string;\n    if(height === 'sm') {\n        selected = ` \n            height: 20px;\n            font-size: 12px;\n        `\n    } else if(height === 'lg') {\n        selected = `\n            height: 40px;\n            font-size: 16px;\n        `\n    } else {\n        selected = `\n        height: 30px;\n        font-size: 14px;\n        `\n    }\n    return selected;\n};\n\n\nexport const selectListText = (textAlign: string) => {\n    let selected: string;\n    if(textAlign === 'center') {\n        selected = ` \n            text-align: -webkit-center;\n        `\n    } else if(textAlign === 'right') {\n        selected = `\n            text-align: -webkit-right;\n            p {\n                padding-right: 10px;\n            }\n        `\n    } else {\n        selected = `\n            text-align: -webkit-left;\n            p {\n                padding-left: 10px;\n            }\n        `\n    }\n    return selected;\n};\n\n\n","import React from 'react'\nimport { StyledListItem  } from './styles';\n\n\n\n\nconst Item: React.FC<{}> = (props) => {\n  \n  return (\n    <StyledListItem {...props} />\n  )\n};\n\nexport default Item;","import React from 'react'\nimport { StyledList  } from './styles';\nimport Item from './Item';\n\n\ninterface ListProps {\n  items?: any[];\n  height?: 'sm' | 'lg';\n  textAlign?: 'left' | 'center' | 'right';\n}\n\n\nconst List: React.FC<ListProps> = (props) => {\n  \n  return (\n    <StyledList {...props}>\n      {props.items?.map(item => (\n        <Item {...props}>\n          <p>{item}</p>\n        </Item>\n      ))}\n    </StyledList>\n  )\n};\n\nexport default List;","import React from 'react'\n\nimport { Box, Divider, Button, List } from 'glassmorphism-react-ts'\nimport 'glassmorphism-react-ts/dist/index.css'\n\nconst App = () => {\n\n  const mockData = ['Apple', 'Banana', 'Pear', 'Carrot'];\n\n  return (\n    <div className=\"dev-background\">\n      <h5>Glassmorphism</h5>\n      <div className='component-ctn'>\n        <Box size='sm' blur={5} />\n        <Divider />\n        <Button size='sm'>Small</Button>\n        <Divider />\n        <Button>Normal</Button>\n        <Divider />\n        <Button size='lg'>Large</Button>\n        <Divider />\n        <List items={mockData} height='sm'/>\n      </div>\n    </div>\n  )\n};\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}