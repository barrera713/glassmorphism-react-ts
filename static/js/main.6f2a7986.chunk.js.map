{"version":3,"sources":["../../src/utils/BoxTools.ts","../../src/components/Box/styles.ts","../../src/components/Box/index.tsx","App.tsx","../../src/components/Button/styles.ts","../../src/utils/ButtonTools.ts","../../src/components/Divider/styles.ts","../../src/components/List/styles.ts","../../src/utils/ListTools.ts","index.tsx"],"names":["StyledBox","styled","props","size","Box","React","App","textAlign","height","className","blur","style","color","ReactDOM","render","document","getElementById"],"mappings":"s8DAAO,I,UCSDA,EAAYC,IAAH,gBACRC,YAAD,MDRF,QAF0BC,ECUmBD,EADlC,MDNI,qEAIR,MAAGC,EACK,oEAIR,OAAGA,EACK,wEAKA,4DAlBWA,SCcGD,YAAD,gBAA8BA,EAL/C,KAKiB,SACSA,YAAD,gBAA8BA,EANvD,KAMyB,SAErBA,YAAD,OARlB,IAQ6CA,6DCRvCE,EAA2BF,YAC/B,OACAG,2CADA,KCmBaC,GCrBML,IAAH,gBACXC,YAAD,MCPF,QAF6BC,EDSsBD,EADrC,MCLC,mEAIR,MAAGC,EACK,mEAIR,OAAGA,EACK,uEAKA,2DAlBcA,SDaJD,YAAD,gBAAiCA,EAL3C,KAKU,SACSA,YAAD,gBAAiCA,EANnD,KAMkB,SAErBA,YAAD,OARd,IAQ4CA,6DEVtBD,IAAH,gBCEOA,IAAH,gBAKhBC,YAAD,MCWF,YAF2BK,EDToBL,EAL5C,WCiBY,uDAGR,UAAGK,EACK,2HAOA,yHAdYA,SDEDN,IAAH,gBACpBC,YAAD,MCvBF,QAF6BM,EDyBoBN,EAD9C,QCrBY,uEAIR,OAAGM,EACK,sEAKA,8DAbcA,S,MLKrB,WAIV,OACE,yBAAKC,UAAU,kBACb,6CACA,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAKN,KAAK,IAAIO,KAAM,GAClB,wBAAIC,MAAO,CAACC,MAAO,WAAnB,8BMRVC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6f2a7986.chunk.js","sourcesContent":["export const selectBoxSize = (size: string) => {\n    let selected: string;\n    if(size === 'sm') {\n        selected = ` \n            height: 200px;\n            width: 200px;\n        `\n    } else if(size === 'm') {\n        selected = `\n            height: 400px;\n            width: 400px;\n        `\n    } else if(size === 'lg') {\n        selected = `\n            height: 500px;\n            width: 500px;\n            `\n    } else {\n        selected = `\n        height: 300px;\n        width: 300px;\n        `\n    }\n    return selected;\n};","import styled from 'styled-components';\nimport { selectBoxSize } from '../../utils/BoxTools';\n\ninterface StyledBoxProps {\n    size?: string,\n    border?: boolean,\n    blur?: number,\n}\n\nconst StyledBox = styled.div<StyledBoxProps>`\n    ${(props: StyledBoxProps) => ( selectBoxSize(props.size!)) }\n        margin: 0 auto;\n        background: rgba( 255, 255, 255, 0.25 );\n        box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n        backdrop-filter: blur(${(props: StyledBoxProps) => `${props.blur}px`});\n        -webkit-backdrop-filter: blur(${(props: StyledBoxProps) => `${props.blur}px`});\n        border-radius: 15px;\n        border: ${(props: StyledBoxProps) => props.border === false ? `none;` : `1px solid rgba( 255, 255, 255, 0.18 );`}\n    `\nexport default StyledBox;","import * as React from 'react'\nimport StyledBox from './styles';\n\ninterface BoxProps {\n  size?: 'sm' | 'm' | 'lg',\n  border?: boolean,\n  blur?: number,\n}\n\nconst Box: React.FC<BoxProps> = (props) => {\n  return (\n  <StyledBox \n   {...props}\n  />\n  )\n};\n\nexport default Box;","import React from 'react'\n\nimport { Box  } from 'glassmorphism-react-ts'\nimport 'glassmorphism-react-ts/dist/index.css'\n\nconst App = () => {\n\n  // const mockData = ['Apple', 'Banana', 'Pear', 'Carrot'];\n\n  return (\n    <div className=\"dev-background\">\n      <h5>Glassmorphism</h5>\n      <div className='component-ctn'>\n        <Box size='m' blur={2}>\n          <h3 style={{color: \"orange\"}}>Hello from glass box!</h3>\n        </Box>\n        {/* <Divider />\n        <Button size='sm'>Small</Button>\n        <Divider />\n        <Button>Normal</Button>\n        <Divider />\n        <Button size='lg'>Large</Button>\n        <Divider /> */}\n        {/* <List items={mockData} height='sm'/> */}\n      </div>\n    </div>\n  )\n};\n\nexport default App\n","import styled from 'styled-components';\nimport { selectButtonSize } from '../../utils/ButtonTools';\ninterface StyledButtonProps {\n    size?: string,\n    blur?: number,\n    border?: boolean\n}\n\nconst StyledButton = styled.div<StyledButtonProps>`\n    ${(props: StyledButtonProps) => ( selectButtonSize(props.size!))};\n    margin: 0 auto;\n    background: rgba( 255, 255, 255, 0.25 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n    backdrop-filter: blur(${(props: StyledButtonProps) => `${props.blur}px`});\n    -webkit-backdrop-filter: blur(${(props: StyledButtonProps) => `${props.blur}px`});\n    border-radius: 7px;\n    border: ${(props: StyledButtonProps) => props.border === false ? `none;` : `1px solid rgba( 255, 255, 255, 0.18 );`}\n    outline: none;\n\n    font-weight: bold;\n    font-size: 0.9375em;\n    color: white; \n    text-align: center;\n    align-items: center;\n    display: inline-grid;\n    vertical-align: middle;\n    &:hover {\n        cursor: pointer;\n        background: rgba( 255, 255, 255, 0.35 );\n    }\n`\nexport default StyledButton ;","export const selectButtonSize = (size: string) => {\n    let selected: string;\n    if(size === 'sm') {\n        selected = ` \n            height: 30px;\n            width: 65px;\n        `\n    } else if(size === 'm') {\n        selected = `\n            height: 40px;\n            width: 100px;\n        `\n    } else if(size === 'lg') {\n        selected = `\n            height: 45px;\n            width: 125px;\n            `\n    } else {\n        selected = `\n        height: 40px;\n        width: 110px;\n        `\n    }\n    return selected;\n};","import styled from 'styled-components';\n\ninterface StyledDividerProps {\n   \n}\n\nconst StyledDivider = styled.div<StyledDividerProps>`\n    width: 100%;\n    height: 1px;\n    margin: 7px 0;\n    background: rgba( 255, 255, 255, 0.25 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n`\nexport default StyledDivider;","import styled from 'styled-components';\nimport { selectListHeight, selectListText } from '../../utils/ListTools';\n\ninterface StyledListProps {\n    height?: 'sm' | 'lg';\n    textAlign?: 'left' | 'center' | 'right';\n}\n\nexport const StyledList = styled.div<StyledListProps>`\n    font-weight: bold;\n    background: rgba( 255, 255, 255, 0.05 );\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\n    width: 100%;\n    ${(props: StyledListProps) => ( selectListText(props.textAlign!))};\n\n\n    p {\n        display: table-cell;\n        vertical-align: middle;\n        height: inherit;\n    }\n`\n\n\nexport const StyledListItem = styled.div<StyledListProps>`\n    ${(props: StyledListProps) => ( selectListHeight(props.height!))};\n    border-bottom: 1.5px solid rgba( 255, 255, 255, 0.2 );\n    color: #ffffff;\n`\n\n\n\n\n\n","export const selectListHeight = (height: string) => {\n    let selected: string;\n    if(height === 'sm') {\n        selected = ` \n            height: 20px;\n            font-size: 12px;\n        `\n    } else if(height === 'lg') {\n        selected = `\n            height: 40px;\n            font-size: 16px;\n        `\n    } else {\n        selected = `\n        height: 30px;\n        font-size: 14px;\n        `\n    }\n    return selected;\n};\n\n\nexport const selectListText = (textAlign: string) => {\n    let selected: string;\n    if(textAlign === 'center') {\n        selected = ` \n            text-align: -webkit-center;\n        `\n    } else if(textAlign === 'right') {\n        selected = `\n            text-align: -webkit-right;\n            p {\n                padding-right: 10px;\n            }\n        `\n    } else {\n        selected = `\n            text-align: -webkit-left;\n            p {\n                padding-left: 10px;\n            }\n        `\n    }\n    return selected;\n};\n\n\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}